###################   Atomic vectors   #####################
#                                                          #
###################   Atomic vectors   #####################

# Subsetting is a natural complement to str(). str() shows me the structure of
# any object, and subsetting allows me to pull out the pieces that i am
# interested in.

# Note that the number after the decimal point gives the original position in
# the vector.
# Positive integers return elements at the specified position.

x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3, 1)]
x[order(x)]

# Duplicated indices yield duplicated values
x[c(1, 1)]

# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]

# Negative integers omit elements at the specified positions:
x[-c(3,1)]

# I can't mix positive and negative integers in a single subset:
x[c(-1, 2)]

# Logical vectors select elements where the corresponding logical value is TRUE.
x[c(TRUE, TRUE, FALSE, FALSE)]
x > 3
x[x > 3]

# If the logical vector is shorter than the vector being subsetted, it will be
# recycled to be the same legth
x <- c(2.1, 4.2, 3.3, 5.4, 8.2)
x[c(TRUE, FALSE)]

# A missing value in the index always yields a missing value in the output:
x[c(TRUE, TRUE, NA, FALSE)]

# Nothing returns the original vector. This is not useful for vectors but is 
# very useful for matrices, data frames, and arrays.
x[]

# Zero returns a zero length vector. It can be helpful for generating test data.
x[0]

# Character vectors to return elements with matching names.
(y <- setNames(x, letters[1:5]))
y[c("d", "c", "a")]

# Like integer indices, i can repeat indices
y[c("a", "a", "a")]

# When subsetting with [ names are always mathced exactly
(z <- c(abc = 1, def = 2))
z[c("a", "d")]

###################   Lists   #####################
#                                                 #
###################   Lists   #####################

# Subsetting a list works in the same way as subsetting an atomic vector.
# Using [ will always return a list.

x <- list(1:3, 5:8, letters[1:5], list(23.4, 2.56, 40.5, "Bangla"))
x
x[1]
class(x[1])

x[3]
x[4]
x[c(1, 1, 1)]

y <- setNames(x, letters[1:4])
y
y[c("c", "c", "c")]
y[0]
x[0]

###################   Matrices and Arrays   #####################
#                                                               #
###################   Matrices and Arrays   #####################

# I can subset higher-dimensional structures in three ways:
      # With multiple vectors.
      # With single vectors.
      # With a matrix.
# The most common way of subsetting matrices(2d) and arrays(2d) is a simple
# generalisation of 1d subsetting. Supply a 1d index for each dimension,
# seperated by comma. Blank subsetting is now useful because it lets me keep
# all rows or all columns.

