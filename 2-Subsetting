###################   Atomic vectors   #####################
#                                                          #
###################   Atomic vectors   #####################

# Subsetting is a natural complement to str(). str() shows me the structure of
# any object, and subsetting allows me to pull out the pieces that i am
# interested in.

# Note that the number after the decimal point gives the original position in
# the vector.
# Positive integers return elements at the specified position.

x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3, 1)]
x[order(x)]

# Duplicated indices yield duplicated values
x[c(1, 1)]

# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]

# Negative integers omit elements at the specified positions:
x[-c(3,1)]

# I can't mix positive and negative integers in a single subset:
x[c(-1, 2)]

# Logical vectors select elements where the corresponding logical value is TRUE.
x[c(TRUE, TRUE, FALSE, FALSE)]
x > 3
x[x > 3]

# If the logical vector is shorter than the vector being subsetted, it will be
# recycled to be the same legth
x <- c(2.1, 4.2, 3.3, 5.4, 8.2)
x[c(TRUE, FALSE)]

# A missing value in the index always yields a missing value in the output:
x[c(TRUE, TRUE, NA, FALSE)]

# Nothing returns the original vector. This is not useful for vectors but is 
# very useful for matrices, data frames, and arrays.
x[]

# Zero returns a zero length vector. It can be helpful for generating test data.
x[0]

# Character vectors to return elements with matching names.
(y <- setNames(x, letters[1:5]))
y[c("d", "c", "a")]

# Like integer indices, i can repeat indices
y[c("a", "a", "a")]

# When subsetting with [ names are always mathced exactly
(z <- c(abc = 1, def = 2))
z[c("a", "d")]

###################   Lists   #####################
#                                                 #
###################   Lists   #####################

# Subsetting a list works in the same way as subsetting an atomic vector.
# Using [ will always return a list.

x <- list(1:3, 5:8, letters[1:5], list(23.4, 2.56, 40.5, "Bangla"))
x
x[1]
class(x[1])

x[3]
x[4]
x[c(1, 1, 1)]

y <- setNames(x, letters[1:4])
y
y[c("c", "c", "c")]
y[0]
x[0]

###################   Matrices and Arrays   #####################
#                                                               #
###################   Matrices and Arrays   #####################

# I can subset higher-dimensional structures in three ways:
      # With multiple vectors.
      # With single vectors.
      # With a matrix.
# The most common way of subsetting matrices(2d) and arrays(2d) is a simple
# generalisation of 1d subsetting. Supply a 1d index for each dimension,
# seperated by comma. Blank subsetting is now useful because it lets me keep
# all rows or all columns.

a <- matrix(1:9, nrow = 3)
# I can give column and row names
a <- matrix(1:9, nrow = 3, dimnames = list(letters[1:3], LETTERS[1:3]))
colnames(a) <- c("A", "B", "C")   # Only column names

a
a[1:2, ]
a[c(TRUE, FALSE, TRUE), c("B", "A")]
a[0, -2]
a[0, -1]

# By default, [ will simplify the results to the lowest possible dimensionality.
# Because matrices and arrays are implemented as vectors with special attributes,
# I can subset them with a single vector. In that case, they will behave like a
# vector. Arrays in R are stored in column-major order.

(vals <- outer(1:5, 1:5, FUN = "paste", sep = ","))
# Fun = "paste" concatenate first two arguments

vals[c(4, 15)]
vals[c(8, 1, 10, 20)]

x <- 1:9; names(x) <- x
y <- 2:8; names(y) <- paste(y,":", sep = "")
x
y
x %o% x  # Multiplication
outer(y, x, FUN = "^")   # Power table

# I can also subset higher-dimensional data structures with an integer matrix.
# (Or, if named, a character matrix).

(vals <- outer(letters[1:5], LETTERS[1:5], FUN = "paste", sep = ","))
select <- matrix(ncol = 3, byrow = TRUE, c(1, 1, 3, 1, 2, 4, 2, 1, 3))
select
vals[select]

###################   Data Franes  #####################
#                                                      #
###################   Data Frames  #####################

# Data frames possess the characteristics of both lists and matrices: if i subset
# with single vector, they behave like lists; if i subset with two vectors, they
# behave like matrices.

(df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3]))
df[df$x == 2, ]
df[c(1, 3), ]

# There are two ways to select columns from a data frame

# Like a list:
df[c("x", "z")]

# Like a matrix:
df[, c("x", "z")]

# There's an important difference if you select a single column: matrix subsetting
# simplifies by default, list sebsetting does not.

str(df["x"])
str(df[, "x"])

###################   Exercises  #####################
#                                                    #
###################   Exercises  #####################

# 1. Fix each of the following common data frame subsetting errors:

mtcars[mtcars$cyl = 4, ]   # Wrong
mtcars[mtcars$cyl == 4, ]  # Right

mtcars[-1:4, ]    # Wrong
mtcars[-c(1:4), ] # Right
mtcars[-(1:4), ]  # Right

mtcars[mtcars$cyl <= 5]    # Wrong
mtcars[mtcars$cyl <= 5, ]  # Right

mtcars[mtcars$cyl == 4|6, ] # Wrong
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]  # Right
mtcars[mtcars$cyl %in% c(4, 6), ]   # Right

# 2. Why does x <- 1:5; x[NA] yield five missing values ?
# NA is a logical vector of length one. It's perfectly OK to index by a logical
# vector. Recycling will expand this to 5 logical NA s. And then indexing by NA
# always give back an NA, so i get five of them.

x <- 1:5
x[NA]

# 3. What does upper.tri() return ? How does subsetting a matrix with it work?
# Do i need any additional subsetting rules to describe its behaviour ?
# It returns TRUE in the upper triangle of the matrix so subsetting with it returns
# the value in the upper triangle, column by column.

x <- outer(1:5, 1:5, FUN = "*")
x
x[upper.tri(x)]
x[upper.tri(x)] <- NA
x
x[lower.tri(x)]
x[lower.tri(x)] <- NA
x
x[upper.tri(x, diag = T)]

# Why does mtcars[1:20] return a error? How does if differ from the similar
# mtcars[1:20, ] ?
# Because there are 11, not 20, and this code is asking for the first 20 columns
# using vector notation. mtcars[1:20, ] asks for the first 20 rows, which is no
# problem because there are 30.

mtcars[1:20]
mtcars[1:20, ]

# Implement my own function that extracts the diagonal entries from a matrix (it
# should behave like diag(x) where x is a matrix).

x <- outer(letters[1:5], LETTERS[1:5], FUN = "paste", sep = "")
x
# 1st function
jFun <- function(x) {
  stopifnot(is.matrix(x), nrow(x) == ncol(x))
  n <- nrow(x)
  return(x[matrix(seq_len(n), nrow = n, ncol = 2)])
}
x
jFun(x)

###################   Understanding the first function   #################

# Checking conditions with stopifnot.
# To create an error, I can use the function "stop". If a variable x needed to be
# a character, i could check for this condition with an if statement and throw an
# error if the condition was violated.

x <- 1
if (!is.character(x)) {
  stop("x must be a character vector.")
}

# If we had a multiple conditions to check, i can use the function "stopifnot".
# I can list as many requirements that should evaluate to TRUE, and stopifnot
# throws an error if it finds one that is FALSE.

stopifnot(is.character(x))

# If x also had to have a length of one, i can add that condition
stopifnot(length(x) == 1, is.character(x))

a <- c(8, 9, 10)
b <- c(9, 10)
c <- 10

seq_along(a)
seq_along(b)
seq_along(c)

seq(a)
seq(b)
seq(c)

sample(a)
sample(b)
sample(c)

seq_len(a)
seq_len(b)
seq_len(c)

# 2nd function
get_diag <- function(input_matrix) {
  n <- min(dim(input_matrix))
  select <- vector()
  for (i in 1:n) {
    select[i] <- input_matrix[i, i]
  }
  return(select)
}
get_diag(x)

# Understading 2nd function

dim(x)
min(dim(x))
vector()
select <- vector()
typeof(select)
class(select)
length(select)

###################   Subsetting Operators  #####################
#                                                               #
###################   Subsetting Operators  #####################

# [[ is similar to [, except it can only return a single value and it allows me
# to pull pieces out of a list. $ is a useful shorthand for [[ combined with
# character subsetting. When [ is applied to a list it always returns a list. It
# never gives me the contents of the list. To get contents, i need to use [[:

a <- list(a = 1, b = 2)
a[[1]]
a[["a"]]

# If i do supply a vector it indexes recursively
b <- list(a = list(b = list(c = list(d = 1))))
b[[c("a", "b", "c", "d")]]
b[["a"]][["b"]][["c"]][["d"]]
b[["a"]][["b"]]
b[[c("a", "b")]]

# Atomic Vector: Remove names.
x <- c(a = 1, b = 2)
x[1]
x[[1]]

# List: Return the object inside the list, not a single element list.
y <- list(a = 1, b = 2)
str(y[1])
str(y[[1]])

# Factor: drops any unused levels
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]

# Matrix or Array: If any of the dimensions has length 1, drops that dimension.
a <- matrix(1:4, nrow = 2)
a
a[1, , drop = FALSE]
a[1, ]

# Data frame: if output is a single column, returns a vector insted of a data frame.
df <- data.frame(a = 1:2, b = 3:4)
df
df[1]
str(df[1])
df[[1]]
str(df[[1]])
df[, "a"]
str(df[, "a"])
str(df[, "a", drop = FALSE])

# One common mistake with $ is to try and use it when i have the name of a column
# stored in a variable:

var <- "cyl"
mtcars$var

mtcars[[var]]  # Instead use [[]]

# There's one important difference between $ and [[. $ does partial matching:
x <- list(abc = 1)
x$a
x[["a"]]

# Missing/out of bounds indices
# [ and [[ differ slightly in their behaviour when the index is out of bounds.
# ex: when i try to extract the fifth element of a length four vector, or subset
# a vector wiith NA or NULL:

x <- 1:4
x[5]
str(x[5])
str(x[NA_real_])
str(x[NULL])

x[[5]]
x[[NA_real_]]
x[[NULL]]

