# all contents must be of the same type (homogenous) 0r the content can be of
# different types (heterogeneous)

#######   Homogeneous   ########   Heterogeneous   ####
                                                      #
# 1d     Atomic Vector                List            #
# 2d     Matrix                       Data frame      #
# nd     Array                                        #
                                                      #
#######################################################

#####################   Vectors   #####################

# The basic data structure in R is the vector. Vectors come in two flavours:
     # Atomic Vector         # List

# They have three common properties:
     # Type                  # Length                     # Attributes
# What it is.     How many elements it contains       Additional Metadata
  typeof()                 length()                       attributes()

# All elements of an atomic vector must be the same type.
# The elements of a list can have different types.

# is.vector() does not test if an object is a vector. Insted it returns TRUE
# only if the object is a vector with no attributes apart form names.

vec <- c("A" = 1, "B" = 2, "D" = 3)
vec
is.vector(vec)
is.atomic(vec)
attributes(vec)

names(vec) <- NULL
vec
is.vector(vec)
is.atomic(vec)
attributes(vec)

class(vec) <- "Number"
vec
is.vector(vec)
is.atomic(vec)
attributes(vec)

# Use is.atomic() || is.list() to test if an object is actually a vector.
# is.atomic() returns TRUE if an object of an atomic type ("logical",
# "integer", "double or numeric", "character", "complex" and "raw") and NULL. 

vec <- c("A" = 1, "B" = 2, "D" = 3)
typeof(vec)
is.atomic(vec) || is.list(vec)

mat <- matrix(1:20, ncol = 5)
attributes(mat)
typeof(mat)
is.vector(mat)
is.atomic(mat) || is.list(mat)

# There are four common types of atomic vectors:
# Logical      Integer       Double or Numeric       Character

# There are two rare types of atomic vectors:
# Complex      Raw

# Atomic vectors are usually created with c(), short for combine:
double_vector <- c(1, 2.5, 4.5)
typeof(double_vector)

# With the L suffix, i get an integer rathar than double
integer_vector <- c(1L, 4L, 6L)
typeof(integer_vector)

# Use TRUE and FALSE (or T and F) to create logical vectors
logical_vectors <- c(TRUE, FALSE, T, F)
typeof(logical_vectors)

character_vector <- c("These are", "some strings")
typeof(character_vector)

# Atomic vectors are always flat, even if i nest c()'s:
c(1, c(2, c(3, 4)))
# the same as
c(1, 2, 3, 4)

# Missing values are specified with NA, which is a logical vector of length 1.
typeof(NA)
length(NA)

# NA will always be coerced to the correct type if used inside c(), or i can
# create NAs of a specific type with NA_real (a double vector), NA_integer_
# and NA_character_
Missing_value <- c(NA, NA, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, "B", NA, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, 6, NA, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, TRUE, NA, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, NA_character_, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, NA_integer_, NA)
Missing_value
typeof(Missing_value)

Missing_value <- c(NA, NA_real_, NA)
Missing_value
typeof(Missing_value)

#####################    Types and Tests    #####################

# Given a vector, i can determine its type with typeof(), or check if it's a
# specific type with an "is" function: 
# is.character()      is.integer()     is.double()     is.logical()
# OR, more generally, is.atomic()
int_var <- c(1L, 6L, 10L)
typeof(int_var)
is.atomic(int_var)

dbl_var <- c(1, 2.5, 4.5)
typeof(dbl_var)
is.atomic(dbl_var)

# is.numeric() is a general test for the "numberliness" of a vector and returns
# TRUE for both integer and double vectors. 
is.numeric(int_var)
is.numeric(dbl_var)
is.numeric("KAMALESH")
is.numeric(TRUE)
is.numeric(sum(TRUE))

# When i attempt to combine different types they will be coerced to the most
# flexible type. Types from least to most flexible are:
# Logical, Integer, Double, Character
str(c(TRUE, 2L))
str(c(TRUE, 2))
str(c(TRUE, "K"))
str(c(TRUE, 10L, 34))
str(c(TRUE, 10L, "K"))
str(c(10L, 35, "40"))

# When a logical vector is coerced to an integer or double, TRUE becomes 1 and
# FALSE becomes 0.
x <- c(c(FALSE , FALSE, TRUE))
as.numeric(x)
as.double(x)
as.integer(x)
as.character(x)
sum(x)
mean(x)

###################   Lists  #####################
#                                                #
###################   Lists  #####################

# Lists are different from atomic vectors because their elements can be of any
# type, including lists. I can construct lists by using list():

x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
x
str(x)

# Lists are sometimes called recursive vectors, because a list can contain
# other lists. This makes them fundamentally different from atomic vectors.

x <- list(list(list(list())))
x
str(x)
is.recursive(x)

# c() will combine several lists into one. If given a combination of atomic
# vectors and lists, c() will coerce the vectors to lists before combine them.

x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))

x
y

str(x)
str(y)

# The typeof() a list is list. I can test for a list with is.list() and coerce
# to a list with as.list().

# Lists are used to build up many of the more complicated data structure in R.
# For example, both data frames and linear models object are lists:

is.list(mtcars)
model <- lm(mpg ~ wt, data = mtcars)
is.list(model)

# Find default datasets

library(help = "datasets")
help(package = "datasets")

# I can turn a list into an atomic vector with unlist().
# If the elements of a list have different types, unlist() uses the
# same coercion rules as c().

model <- mtcars
model <- unlist(model)
model <- unlist(model, use.names = FALSE)
model[1:10]
model

# If the two arguments are atomic vectors of different types, one is coerced
# to the type of the other, the (decreasing) order of precedence being
# character, complex, numeric, integer, logical and raw.

1 == "1"
-1 < FALSE
"one" < 2
sort(c("one", "2", "three", "-1", "10"))

# First number, letter and capital, small letter is important to comparison.

"10" < "2"
"25" > "100"
"19" > "2"
"Louse" > "louse"
"money" > "Louse"

###################   Attributes  #####################
#                                                     #
###################   Attributes  #####################

# Attributes can be accessed individually with attr() or all at once
# (as a list) with attributes().

y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
str(attributes(y))

# The structure() function returns a new object with modified attributes:

structure(y, my_attribute = "A vector")

# By default, most attributes are lost when modifying a vector:

attributes(y[1])
attributes(sum(y))

# The only attributes not lost are the three most important:

       # Names: A character vector giving each element a name.
       # Dimensions: used to turn vectors into matrices and arrays.
       # Class: Used to implement the s3 object system.

# Each of these attributes has a specific accessor function to get and set
# values. When working with these attributes use names(x), dim(x), class(x)
# not attr(x, "names"), attr(x, "dim"), attr(x, "class").

###################   Names  #####################
#                                                #
###################   Names  #####################

# I can name a vector in three ways:
       # When creating it-
x <- c(a = 1, b = 2, c = 3)
x
       # By modifing an existing vector in place:
x <- 1:4; names(x) <- c("a", "b", "c", "d")
x
x <- 1:5; names(x)[1] <- c("a")
x
       # By creating a modified copy of a vector:
x <- setNames(1:6, c("one", "two", "three", "four", "five", "six"))
x

# If some names are missing when i create the vector , the names will be set
# to an empty string for those elements. If i modify the vector in place by
# setting some, but not all variable names, names() will return NA for them.
# If all names are missing, names() will return NULL.

y <- c(a = 1, 2, 3)
y
names(y)

v <- c(1, 2, 3); names(v) <- c("a")
v
names(v)

z <- c(1, 2, 3)
z
names(z)

# I can create a new vector without names using unname(x), or remove names
# in place with names(x) <- NULL

unname(x)
names(y) <- NULL

###################   Factors   #####################
#                                                   #
###################   Factors   #####################

# A factor is a vector that can contain only predefined values, and is used to
# store categorical data. Factors are built on top of integer vectors using
# two attributes: the class, "factor", which makes them behave differently
# from regular integer vectors, and the levels, which defines the set of 
# allowed values.

x <- factor(c("a", "b", "b", "a"))
x
class(x)
levels(x)
str(x)

# I can't use values that are not in the levels
x[2] <- "c"
x

# I can't combine factors
c(factor("a"), factor("b"))

# Factors are useful when i konw the possible values a variable may take, even
# if i don't see all values in a given dataset. Using a factor instead of a
# character vector makes it obvious when some groups contain no observations:

sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sex_factor)

# Often a missing value encoded in a special way like . or -. To remedy the
# situation, coerce the vector from a factor to a character vector, and then
# from a character vector to a double vector.

# Reading in "text" instead of from a file here:
z <- read.csv(text = "value\n12\n1\n.\n9")
z
str(z)
typeof(z$value)
as.double(z$value)
class(z$value)
as.double(as.character(z$value))

# Or use na.strings argument to read.csv().

z <- read.csv(text = "value\n12\n1\n.\n9", na.strings = ".")
typeof(z$value)
class(z$value)
z$value

# An early draft used this code to illustrate structure()
# But when i print that object i don't see the comment attriute. Because
# comment argument or function set and query a comment attribute. This is
# usefull for data.frames. Contrary to other attributes, the comment is not
# printed (by print or print.default)

num <- 1:5
structure(num, comment = "my attributes")
num <- structure(num, comment = "my attributes")
attr(num, "comment")
attributes(num)
comment(num)

x <- matrix(1:12, nrow =  3, ncol =  4)
comment(x) <- c("This is my very important data from experiment #0234",
                "Jun 5, 1998")
x
comment(x)

# What happens to a factor when i modify its level?
f1 <- factor(letters)
str(f1)
f1

# When i modify a factor's level it also modify the factor.
# rev provides a reversed version of its argument

levels(f1) <- rev(levels(f1))
f1

gender <- factor(c("male", "female", "female", "male", "female", "female"))
str(gender)
gender
levels(gender) <- rev(levels(gender))
gender

# What does this code do? How do f2 and f3 differ from f1?

f1 <- factor(letters)
f2 <- rev(factor(letters))
f3 <- factor(letters, levels = rev(letters))
f1
f2
f3

###################   Matrices and Arrays   #####################
#                                                               #
###################   Matrices and Arrays   #####################

# Adding a dim attribute to an atomic vector allows it to behave like a multi-
# dimensional array. A special case of the array is the matrix, which has two
# dimensions.

# Two scalar arguments to specify rows and columns
a <- matrix(1:6, nrow = 2, ncol = 3)
a

# One vector argument to describe all dimensions
b <- array(1:12, c(2, 3, 2))
b

# I can also modify an object in place by setting dim()
c <- 1:6
dim(c) <- c(3,2)
dim(c) <- c(2,3)

# length() and names() have high dimensional generalisations:
        # length() generalises to nrow() and ncol() for matrices, and dim()
        # for arrays.
        # names() generalises to rownames() and colnames() for matrices, and
        # dimnames(), a list of character vector, for arrays.
length(a)
nrow(a)
ncol(a)

rownames(a) <- c("A", "B")
a
colnames(a) <- c("a", "b", "c")
a

length(b)
dim(b)
dimnames(b) <- list(c("one", "two"), c("a", "b", "c"), c("A", "B"))
b

# c() generalises to cbind() and rbind() for matrices, and abind() (provided
# by the abind package) for arrays.

cbind(1:3, 4:6, 7:9)
cbind(a, d = c(7,8))
rbind(R1 = 1:4, R2 = 5:8)
rbind(a, C = c(7, 8, 9))

# I can tranpose a matrix with t(); the generalised equivalent for arrays
# is aperm()

t(a)
aperm(b)

# Test if an object is a matrix or array. dimension of them.
is.matrix(a)
is.matrix(b)
is.array(a) # A special case of the array is the matrix.
is.array(b)
dim(a)
dim(b)

# Turn an existing vector into a matrix or array
x <- c(1:20)
x
as.matrix(x)
as.array(x)

# vectors are not the only 1-dimensional data structure. I can have matrices
# with a single row or single column, or arrays with a single dimension. They
# may print similarly, but will behave differently. Use str() to reveal
# the differences.

str(1:3)     # 1d vector
str(matrix(1:3, ncol = 1))    # comumn vector
str(matrix(1:3, nrow = 1))    # row vector
str(array(1:3, 3))    # array

# While atomic vectors are most commonly turned into matrices, the dimension
# attribute can also be set on lists to make list matrices or list arrays.

l <- list(1:3, "a", TRUE, 1.0)
l
dim(l) <- c(2, 2)
l

# What does dim() return when applied to a vector?
x <- c(10, 11, 12, 13,14)
x
dim(x)

# If is.matrix(x) is TRUE, what will is.array(x) return?
x <- matrix(1:6, ncol = 3)
x
is.matrix(x)
is.array(x)  # Because matrix is a special case of the array.

# Different dimension
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
x1
x2
x3


###################   Data frmaes   #####################
#                                                       #
###################   Data frames   #####################

# A data frame has names(), colnames() and rownames(), although names() and
# colnames() are the same  thing.
# I can create a data frmae using data.frame(), which takes named vectors 
# as input:

df <- data.frame(x = 1:3, y = c("a", "b", "c"))
df
str(df)

df <- data.frame(
  x = 1:3,
  y = c("a", "b", "c"),
  stringsAsFactors = FALSE
)
df
str(df)


###################   Testing and coercion   #####################
#                                                                #
###################   Testing and coercion   #####################

typeof(df)
class(df)
is.data.frame(df)

# I can coerce an object to a data frame with as.data.frame():
        # A vector will create a one column data frame.
x <- c(1:10)
as.data.frame(x)

# A list will create one column for each element; It's an error if they are
# not all the same length.

x <- list(a = 1:10, b = 21:30)
x
as.data.frame(x)

x <- list(a = 1:10, b = 1:5)
x
as.data.frame(x)

# A matrix will create a data frame with the same number of columns and rows
# as the matrix

x <- matrix(1:20, ncol = 4)
x
as.data.frame(x)

###################   Combining data frames  #####################
#                                                                #
###################   Combining data frames  #####################

# I can combine data frames using cbind() and rbind():

cbind(df, data.frame(z = 3:1))
rbind(df, data.frame(x = 10, y = "z"))

# It's a common mistake to try and create a data frame by cbind()ing vectors
# together. This doesn't work because cbind() will create matrix unless one
# of the arguments is already a data frame. Instead use data.frame() directly:

bad <- data.frame(cbind(a = 1:2, b = c("a", "b")))
bad
str(bad)

good <- data.frame(a = 1:2, b = c("a", "b"), stringsAsFactors = FALSE)
good
str(good)

###################   Special columns  #####################
#                                                          #
###################   Special comumns  #####################

# Since a data frame is a list of vectors, it is possible for a data frame
# to have a column that is a list:

df <- data.frame(x = 1:3)
df
df$y <- list(1:2, 1:3, 1:4)
df
df$y

# However, when a list is given to data.frame(), it tries to put each item
# of the list into its own columns, so this fails:
data.frame(x = 1:3, y = list(1:2, 1:3, 1:4))

# A workaround is to use I(), which cause data.frame() to treat the list as
# one unit:

dfl <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))
dfl
str(dfl)
dfl$y

# I() adds AsIs class to its input, but this can usually be safely ignored.
# Similarly, it's also possible to have a column of a data frame that's a
# matrix or array, as long as the number of rows matches the data frame:

dfm <- data.frame(x = 1:3, y = I(matrix(1:9, nrow = 3)))
dfm
str(dfm)
dfm[2, "y"]
